@page "/"
@inject BacchusDbContext _db
@inject ProductService _productService

@if (_selectedProduct != null)
{
    <Bacchus.Server.Components.Bid Product="@_selectedProduct"/>
}

<div class="d-flex">
    <h3 class="mr-auto">Products</h3>
    <div class="form-inline ml-auto">
        <div class="input-group">
            <input type="search" class="form-control" @onchange="SearchFilterChanged" placeholder="search..." />
            <select class="form-control" @onchange="CategoryFilterChanged">
                <option value="">-- All categories --</option>
                @foreach (var category in _categories ?? new List<string>())
                {
                    <option value="@category">@category</option>
                }
            </select>
        </div>
    </div>
</div>

<table class="table">
    <thead>
        <tr>
            <th></th>
            <th>Name</th>
            <th>Category</th>
            <th>Description</th>
            <th>End time</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var product in _filteredProducts ?? new List<Product>())
	    {
            var productHasAged = (product.BiddingEndDate - DateTimeOffset.UtcNow).TotalMilliseconds < 0;   

		    <tr class="@(_selectedProduct == product ? "table-active" : null)">
                <td>
                    <button class="btn btn-info" @onclick="(() => OpenBid(product))" disabled="@(productHasAged ? "disabled" : null)">Select</button>
                </td>
                <td>@product.ProductName</td>
                <td>@product.ProductCategory</td>
                <td>@product.ProductDescription</td>
                <td>@(product.BiddingEndDate - DateTimeOffset.UtcNow)</td>
            </tr>
	    }
    </tbody>
</table>

@code
{
    private IList<Product> _products;
    private IList<Product> _filteredProducts;
    private IList<string> _categories;
    private string _searchFilter;
    private string _categoryFilter;
    private Product _selectedProduct;

    protected override async Task OnInitializedAsync()
    {
        _products = await _productService.FetchProductsAsync();

        _categories = _products
            .Select(x => x.ProductCategory)
            .Distinct()
            .ToList();

        ApplyFilter();
    }

    private void SearchFilterChanged(ChangeEventArgs args)
    {
        _searchFilter = (string)args.Value;
        ApplyFilter();
    }

    private void CategoryFilterChanged(ChangeEventArgs args)
    {
        _categoryFilter = (string)args.Value;
        ApplyFilter();
    }

    private void ApplyFilter()
    {
        _filteredProducts = _products
            .Where(x => String.IsNullOrEmpty(_categoryFilter)
                || x.ProductCategory == _categoryFilter)
            .Where(x => String.IsNullOrEmpty(_searchFilter)
                || x.ProductName.ToLower().Contains(_searchFilter.Trim().ToLower())
                || x.ProductDescription.ToLower().Contains(_searchFilter.Trim().ToLower())
                || x.ProductCategory.ToLower().Contains(_searchFilter.Trim().ToLower()))
            .ToList();
    }

    private void OpenBid(Product product)
    {
        _selectedProduct = product;
    }
}